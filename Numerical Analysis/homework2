数值分析第二次上机练习实验报告
——非线性方程求根的迭代解法
力四 肖飞宇 2014011761
一、 问题的描述
求解方程𝑥3 + 2𝑥2 + 10𝑥 − 20 = 0在𝑥0 = 1附近的根。 有效数字需要达到的位数为 7 位。
二、 方法描述
使用不动点迭代法，运用不同的迭代公式，对于方程的根进行求解。
（ 1） 𝑥𝑘+1 = 20−𝑥𝑘 3−2𝑥𝑘 2
10
和 （ 2） 𝑥𝑘+1 = 3 √20 − 2𝑥𝑘 2 − 10𝑥𝑘 均不收敛
注意到其作为迭代函数在零点处的一阶导数均不为零。
使用 Steffensen 加速法对于（ 1）（ 2） 进行处理。
一般的表达式用迭代函数表示为：
φ(x) = x − (𝜌(𝑥)−𝑥)^2
𝜑(𝜑(𝑥))−2𝜑(𝑥)+𝑥, 其中𝜌(𝑥)为（ 1）（ 2） 中不收敛的迭代函数，使用 Stefensen
方法可以改善其的收敛性。
使用 Newton 迭代方法处理方程， 其基本的公式为：
φ(x) = x −
𝑓(𝑥)
𝑓(𝑥 ̇ )
而 Newton 迭代方法至少是超线性收敛的。
使用一般的构造方法， 构造出一个三阶收敛的迭代函数，其表达式如下：
ω(x) = x −
𝑥3 + 2𝑥2 + 10𝑥 − 20
3𝑥2 + 4𝑥 + 10 +
(𝑥3 + 2𝑥2 + 10𝑥 + 20)2
2(3𝑥2 + 4𝑥 + 10)3 (−6𝑥 − 4)
三、 方案设计
使用 Fortran 编写计算程序， 并且将数据输入到 Matlab 中做出收敛的图像而比较分析。
四、 数据分析
上面由理论分析知道未处理的（ 1）（ 2） 两种方法都不收敛， 编写程序计算验证可以看
出均符合理论（ 一个是在两个数之间摆动，另一个最后迭代出了初值的邻域）
下列表格分别给出了（ 1）（ 2） 两种方法通过 Steffensen 加速法给出的迭代方法、 Newton
法以及以及构造的三阶收敛法的迭代过程的数据记录，最后用一个图来反映这四种方法
的收敛过程和比较。
（ 1） 方法一的 Steffensen 加速
𝑥
0 = 1
i 2 3 4 5 6
x 1.000000000
00000
1.333492139
11386
1.368415439
10839
1.368808058
30916
1.368808107
82137
可以看出， 计算到第五次的时候已经有精确的 10 位数字。
（ 2） 方法二的 Steffensen 加速
𝑥
0 = 1
i 2 3 4 5
x 1.2000000476837
2
1.2737404108047
5
1.3083000183105
5
1.3472751379013
1
i 6 7 8
x 1.3667238950729
4
1.3687893152236
9
1.3688081502914
4
收敛稍稍慢于前一种，但是在计算到第七次的时候，也已经有了 8 位近似的结果。
（ 3） Newton 迭代法
𝑥
0 = 1
i 2 3 4 5
x 1.4117647058823
5
1.3693364705882
4
1.3688081886175
3
1.3688081078213
7
Newton 迭代法收敛稍快，在迭代四次的时候也达到了 9 位小数的精度。
（ 4） 三阶收敛方法
𝑥
0 = 1
i 2 3 3
x 1.36189700793812 1.36880806803185 1.36880810782137
显然，三阶收敛方法收敛速度最快。
四种迭代方法的收敛过程图像：
从图中，各个迭代方法的收敛的速度很显然可以得知。
五、 总结和分析
在学习完线性方程组的解法之后， 学习非线性方程组的解法， 两者比较， 前者有着基本
的直接解法， 却往往有着计算量巨大的问题， 而后者求助于迭代解法重在收敛性和收敛
阶的问题。 练习中方程较为简单， 但是也可以看出不同的方法的收敛速度还是有着不小
的差别， 而且有的迭代方程根本就不收敛。
迭代解法的最原始的想法是二分法， 但是其收敛速度太慢， 虽然如此还是有着对于其他
方法的启发；有着显著的应用价值的方法是 Newton 迭代法（ 当然还有在函数的性质不
是很好的情况下的退化成的弦截法），由于其简单而又是一个超线性收敛，有着很好的
实用性。
从算例中可以看出 Steffence 加速法将不收敛的方法改进为收敛的应用，还掌握了一定
收敛阶的迭代函数的构造方法。
